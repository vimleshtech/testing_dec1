SQL	: structural query language 
========================================
-> Data Type
	Numeric without decimal:
	------------------
	-tinyint		: 2 byte 
	-int			: 4 byte	*
	-bigint  /long 		: 8 byte 	*


	Numeric with decimal:
	--------------------------
	-float			: 4 byte	till 7 decmial position *
	-double			: 8 byte	till 15 decimal position *
	-numeric(5,2)		: 123.45				*
		
	Alpha Numeric :combination of letter, number, sepecial chars
	---------------------------
	-char		: fix size  : example: char(10) ='abc'	*
						-rest 7 char will not be freed
	-varchar	: dynamic size :  example: varchar(10) ='abc'	*
				
	-text		: for  tageed data like xmls, csv etc.
	
	Boolean
	---------------------
	-bit				*

	Date
	-------------
	-date
	-time
	-datetime

	Other	
	----------
	-blob		: for image, encrypted data 
	
	
Example:
	create table  products
	(
		pid		int ,
		pname		varchar(100)	,
		brandname	varchar(40)	,	
		price		double	,
		qty		int,
		mfd		date			--yyyy-mm-dd				
	)
			

	save/insert data in a table
	--------------------------------
	insert into products
	values(1,'dove','test',34.50,10,'2018-11-01')


-> Keywords
	-distinct		: show list of unque rows/values 
	-limit / top 		: show given no of rows 
	
	
-> Function 
	-max()
	-min()
	-sum()
	-avg()
	-count()
		

-> Group By : to summarize the data 
	
-> Having : can be use only with group by 
	
-> Join:
=====
create table  products
	(
		pid		int ,
		pname		varchar(100)	,
		brandname	varchar(40)	,	
		price		float	,
		qty		int,
		mfd		date			--yyyy-mm-dd		
		
	)


--see the table structure 
select * from products 

--insert data 
insert into products
values(10,'food','band2',34.50,10,'2018-11-01');

insert into products(pid,pname)
values(12,'test');


--insert multiple rows
insert into products
values(2,'iphone','test',75000,10,'2017-11-01'),
(3,'sony phone','test',15000,10,'2016-01-01'),
(4,'hp laptop','test',36000,10,'2016-05-01'),
(5,'dell laptop','test',34000,10,'2017-04-01'),
(6,'sumsang','test',45000,10,'2014-12-01');


--PROJECTION : SHOW SELECTED COLUMNS/FIELDS 
select * from products  -- * : SHOW ALL COLUMNS

select price,pname from products;

--alias name
select price as product_price ,pname [product name] from products;

--SELECTION : filter the rows / records
--Where : 
/*
Operator:
>
>=
<
<=
=
!=		or <> 
in
not in
between 
not between


*/

select * from products where price > 10000;
select * from products where price < 10000;
select * from products where price = 10000;
select * from products where pname ='iphone'

select * from products where pid in (1,3,5,7)
select * from products where pid not in (1,3,5,7)

select * from products where pNAME  in ('IPHONE','DOVE')


select * from products where pRICE BETWEEN 10000 AND 50000
select * from products where pRICE>= 10000 AND PRICE<= 50000


select * from products where pRICE NOT BETWEEN 10000 AND 50000


--
SELECT * FROM PRODUCTS WHERE PID > 2 AND PRICE < 40000;

SELECT * FROM PRODUCTS WHERE PID > 2 OR PRICE < 40000;


--distict: return unique list of values 
select * from products

select distinct brandname from products

--top
select top 2 * from products 

--order by  : arrange data in acending or decending order
select * from products order by price asc 

select * from products order by pname  asc 


select * from products order by price desc 

--show hihest price
select  top 1 * from products order by price desc 

--show lowest 
select  top 1 * from products order by price asc

--show 3rd highest value 
--subquery / inner query 
select top 1 * from (
					select  top 3 * from products order by price desc
					) a
order by price asc 

--show 2nd lowest value 
select top 1 * from (
					select  top 2 * from products order by price asc
					) a
order by price desc



--functions
select max(price) as highest_price from products;
select min(price) from products;
select sum(price) from products;
select avg(price) from products;
select count(price) from products;

--return count of all rows
select count(*) from products;
--return count of all rows, but null value will be excluded in given column
select count(price) from products;



--group by 
select brandname , count(*) as count_of_rows,max(price),min(price),sum(price),avg(price)
from products group by brandname 


select brandname , count(*) as count_of_rows,max(price),min(price),sum(price),avg(price)
from products 
where mfd ='2018-11-01'
group by brandname 



select brandname , count(*) as count_of_rows,max(price),min(price),sum(price)-avg(price)
from products 

group by brandname 


--having
select brandname , count(*) as count_of_rows,max(price),min(price),sum(price),avg(price)
from products group by brandname 
having count(*)>1















	 
	